
======================================================================
CODE DOCUMENTATION
======================================================================

File: audio_merger.py
Lines of Code: 106
Functions: 2
Classes: 1

parts {
  text: "```python\nimport os\nimport subprocess\nimport ffmpeg\nimport sys\nfrom src.entity.artifacts import AudioMergerArtifact\nfrom src.entity.config_entity import AudioMergerConfig, ConfigEntity\nfrom src.logger import logging\nfrom src.exceptions import CustomException\nfrom src.constants import *\n\nclass AudioMerger:\n    def __init__(self):\n        self.audio_merger_config=AudioMergerConfig(config=ConfigEntity())\n        #self.final_output_path = config.final_output_path\n        logging.info(\"AudioMerger initialized\")\n\n    def merge(self, original_video, video_no_audio):\n        try:\n            probe = ffmpeg.probe(original_video)\n            has_audio = any(stream[\'codec_type\'] == \'audio\' for stream in probe[\'streams\'])\n\n            if not has_audio:\n                os.rename(video_no_audio, self.audio_merger_config.final_output_path)\n                return\n\n            temp_audio = f\"{self.audio_merger_config.final_output_path}{self.audio_merger_config.temp_audio_extension}\"\n            extract_cmd = [\n                \"ffmpeg\", \"-y\", \"-i\", original_video, \"-vn\", \"-acodec\", \"copy\", temp_audio\n            ]\n            subprocess.run(extract_cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n\n            merge_cmd = [\n                \"ffmpeg\", \"-y\", \"-i\", video_no_audio, \"-i\", temp_audio,\n                \"-c:v\", \"copy\", \"-c:a\", \"aac\", \"-strict\", \"experimental\", self.audio_merger_config.final_output_path\n            ]\n            subprocess.run(merge_cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            os.remove(temp_audio)\n            logging.info(\"Audio merged successfully\")\n            return AudioMergerArtifact(final_output_path=self.audio_merger_config.final_output_path)\n        except Exception as e:\n            logging.error(f\"Error in audio merging: {str(e)}\")\n            os.rename(video_no_audio, self.audio_merger_config.final_output_path)\n            raise CustomException(e, sys)\n```\n\n# Overview\nThis code defines a class `AudioMerger` responsible for merging audio from one video file into another video file that lacks audio. It leverages the `ffmpeg` library for audio extraction and merging.  It also handles cases where the source video lacks audio.\n\n# Key Components\n*   **`AudioMerger` Class:** Orchestrates the audio merging process.\n    *   `__init__`: Initializes the class, loading the configuration using `AudioMergerConfig`.\n    *   `merge`: Extracts audio from the `original_video`, merges it into the `video_no_audio`, and returns an `AudioMergerArtifact`.\n\n# Technical Details\n*   **Configuration:** The `AudioMergerConfig` likely contains paths and filenames, enabling configurable behavior.\n*   **Audio Extraction:** `ffmpeg` is used to extract audio from the original video file. `subprocess.run` executes the `ffmpeg` command.\n*   **Audio Merging:** `ffmpeg` merges the extracted audio with the video file lacking audio using another `subprocess.run` call.\n*   **Error Handling:**  A `try-except` block handles potential exceptions during merging and renames the `video_no_audio` to `final_output_path` if error occures.\n*   **No Audio Check:** Checks if the original video has audio; if not, it renames the video without audio and skips the merging process.\n*   **Temporary File:** A temporary audio file is created to store the extracted audio before merging and subsequently removed.\n"
}
role: "model"


======================================================================
Generated by AI Documentation Assistant
======================================================================
